EventFilter = SeletClauses "WHERE" ContentFilter .

SeletClauses = "SELECT" { SimpleAttributeOperand ","}  SimpleAttributeOperand.

ContentFilter = { filterOperator "," } filterOperator .

filterOperator =  (Equals | IsNull | GreatherThan | LessThan | GreatherThanOrEqual | LessThanOrEqual | Like | Not | Between | InList | And | Or | Cast | BitwiseAnd | BitwiseOr | OfType) .

filterOperand = ( ElementOperand | LiteralOperand | SimpleAttributeOperand).

ElementOperand = "INDEX" number .

LiteralOperand = "{JSON encoded Variant}"";".

SimpleAttributeOperand =   [ "TYPEID" TypeDefinitionId ]  "PATH" { QualifiedName ";"}  QualifiedName [ "ATTRIBUTE" AttributeId ] [ "INDEXRANGE" IndexRange] .

IsNull = "ISNULL" filterOperand .

Equals = filterOperand "EQUALS" filterOperand.

GreatherThan = filterOperand "GREATHERTHAN" filterOperand.

LessThan = filterOperand "LESSTHAN" filterOperand.

GreatherThanOrEqual = filterOperand "GREATHERTHANOREQUAL" filterOperand.

LessThanOrEqual = filterOperand "LESSTHANOREQUAL" filterOperand.

Like = filterOperand "LIKE" filterOperand .

Not = "NOT" filterOperand.

Between = filterOperand "GREATHERTHANOREQUAL" filterOperand "LESSTHANOREQUAL" filterOperand.

InList =  filterOperand "INLIST" [{ "EQUALS" filterOperand "," }] "EQUALS" filterOperand .

And = ElementOperand "AND" ElementOperand.

Or = ElementOperand "OR" ElementOperand.

Cast = filterOperand "CAST" filterOperand.

BitwiseAnd = filterOperand "BITWISEAND" filterOperand.

BitwiseOr = filterOperand "BITWISEOR" filterOperand.

OfType = "OFTYPE" NodeId.

TypeDefinitionId = NodeId.

IndexRange = "NumericRange".

AttributeId = Integer.

QualifiedName =  NamespaceIdx ":" Name .

NodeId = ( NodeId ).

NumericNodeId = NamespaceIdx  NodeNr.

NodeIdasString = NamespaceIdx  Name.

NamespaceIdx = "ns=" Integer.

Integer = { Number } .

Name = { Letter } .

GUID = "GUID".