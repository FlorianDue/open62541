%{
#include "eventfilter_parser.h"

#define YY_CTX_LOCAL 1
#define YY_CTX_MEMBERS                  \
    UA_Parsed_EventFilter parsedFilter; \
    UA_String input;                    \
    size_t pos;

#define YY_INPUT(yyctx, buf, result, max_size) \
{                                              \
  if(yyctx->input.length <= yyctx->pos) {      \
      result = 0;                              \
  } else {                                     \
      result = yyctx->input.length - yyctx->pos;\
      if(result > max_size)                     \
          result = max_size;                   \
      memcpy(buf, &yyctx->input.data[yyctx->pos], result); \
      yyctx->pos += result;                    \
  }                                            \
}

UA_Counters ctr;
UA_Element_List global;
UA_Local_Operand operand;

union value{
    char *str;
    UA_Parsed_Operand operand;
    UA_Parsed_Operator element;
};

# define YYSTYPE union value
%}

EventFilter = SelectClauses ContentFilter
SelectClauses =
        Select (_  ( (oper:SimpleAttributeOperand | '(' _  oper:SimpleAttributeOperand _  ')') _  "," _                 {yy->parsedFilter.status = append_select_clauses(&yy->parsedFilter.filter.selectClauses, &yy->parsedFilter.filter.selectClausesSize, &oper.operand.value.extension, yy->parsedFilter.status);}
        )* (oper:SimpleAttributeOperand | '(' _  oper:SimpleAttributeOperand _  ')')) _                                 {yy->parsedFilter.status = append_select_clauses(&yy->parsedFilter.filter.selectClauses, &yy->parsedFilter.filter.selectClausesSize, &oper.operand.value.extension, yy->parsedFilter.status);}
Select = _ 'SELECT' _                                                                                                   {init_item_list(&global, &ctr);}
ContentFilter = _ 'WHERE' _ (
            element:SingleBranchStructure _ ('FOR' _ (ReferencedElement)+)?
        |   element:BranchStructure   _ ('FOR' _ (ReferencedElement)+)?)                                                {yy->parsedFilter.status = create_content_filter(&global, &yy->parsedFilter.filter.whereClause, element.str, yy->parsedFilter.status);}
BranchStructure = (   'OR' _  op1:Child_1 op2:Child_2                                                                   {create_branch_element(&global, &ctr.branch_element_number, UA_FILTEROPERATOR_OR, op1.str, op2.str, &$$.str);}
                    | 'AND' _  op1:Child_1 op2:Child_2                                                                  {create_branch_element(&global, &ctr.branch_element_number, UA_FILTEROPERATOR_AND, op1.str, op2.str, &$$.str);}
                  )
SingleBranchStructure = ( ElementOperand                                                                                {save_string(yytext, &$$.str);}
                        | oper:ForOperator
                        )
Child_1 = ((       '(' _  ElementOperand _  "," _                                                                       {save_string(yytext, &$$.str);}
                 | '(' _  oper:SimpleAttributeOperand _  "," _                                                          {add_operand_from_branch(&$$.str, &ctr.operand_ctr, &oper.operand, &global);}
                 | '(' _  oper:LiteralOperand _  "," _                                                                  {add_operand_from_branch(&$$.str, &ctr.operand_ctr, &oper.operand, &global);}
                )| '(' _  BranchStructure _  "," _ |  '(' _  ForOperator _  "," _ )
Child_2 = ((      ElementOperand           _  ')'                                                                        {save_string(yytext, &$$.str);}
                 | oper:SimpleAttributeOperand   _  ')'                                                                 {add_operand_from_branch(&$$.str, &ctr.operand_ctr, &oper.operand, &global);}
                 | oper:LiteralOperand      _  ')'                                                                      {add_operand_from_branch(&$$.str, &ctr.operand_ctr, &oper.operand, &global);}
               ) | BranchStructure _  ')' | ForOperator    _  ')')
ForOperator = (operator:OperatorInstance | "(" _  operator:OperatorInstance _  ")")                                     {handle_for_operator(&global, &ctr.for_operator_reference, &$$.str, &operator.element);}
ReferencedElement = ( ReferencedOperator
                    | (ref:ReferenceElement oper:Operand) _                                                                      {create_next_operand_element(&global, &oper.operand, ref.str);}
                    | (ref:ReferenceElement _ NodeId) _                                                                          {create_nodeid_element(&global, &operand.id, ref.str);}
                    )
ReferencedOperator = (  ref:ReferenceElement _  operator:OperatorInstance _)                                                      {add_new_operator(&global, ref.str, &operator.element);}
                     | (ref:ReferenceElement _  op1:BranchStructure _)                                                            {change_element_reference(&global, op1.str, ref.str);}
                     | (ref:ReferenceElement _  (oper:Operand _                                                                   {create_in_list_operator(&global, &oper.operand, ref.str);}
                     _  ('INLIST') _  '[' _ (oper:Operand _  "," _                                                             {add_in_list_children(&global, &oper.operand);}
                     )* _  oper:Operand _ ']') _                                                                               {add_in_list_children(&global, &oper.operand);}
                     )
OperatorInstance = ( (oper_1:Operand operator:TwoOperandsOperatorType oper_2:Operand)                                              {handle_two_operands_operator(&$$.element, &oper_1.operand, &oper_2.operand, &operator.element.filter);}
                   | (oper_1:Operand _  ('BETWEEN') _  '[' _ oper_2:Operand _  "," _  oper_3:Operand _ ']')                    {handle_between_operator(&$$.element, &oper_1.operand, &oper_2.operand, &oper_3.operand);}
                   | (_  operator:SingleOperatorType)) _
SingleOperatorType = ( ("NOT" | '!') _  oper:Operand _                                                                               {add_child_operands(&oper.operand, 1, &$$.element, UA_FILTEROPERATOR_NOT);}
                     | ("ISNULL" | '0=' | '0' _  '=') _  oper:Operand _                                                              {add_child_operands(&oper.operand, 1, &$$.element, UA_FILTEROPERATOR_ISNULL);}
                     )
                     | 'OFTYPE' _  (
                     (NodeId | "(" _  NodeId _  ")")                                                                             {handle_oftype_nodeId(&$$.element, &operand.id);}
                     | oper:Operand                                                                                              {add_child_operands(&oper.operand, 1, &$$.element, UA_FILTEROPERATOR_OFTYPE);}
                     ) _
TwoOperandsOperatorType = ( "GREATERTHAN" | '>' | 'GT')                                                                                   {$$.element.filter = UA_FILTEROPERATOR_GREATERTHAN;}
                        | ( "EQUALS" | ('"' '==' '"') | 'EQ' )                                                                           {$$.element.filter = UA_FILTEROPERATOR_EQUALS;}
                        | ( "LESSTHAN" | '<' | 'LT')                                                                                     {$$.element.filter = UA_FILTEROPERATOR_LESSTHAN;}
                        | ( "GREATEROREQUAL" | '"' '>=' '"' | 'GE' )                                                                     {$$.element.filter = UA_FILTEROPERATOR_GREATERTHANOREQUAL;}
                        | ( "LESSOREQUAL" | '"' '<=' '"' | 'LE')                                                                         {$$.element.filter = UA_FILTEROPERATOR_LESSTHANOREQUAL;}
                        | ( "LIKE" | '"'  '<=>' '"'  )                                                                                   {$$.element.filter = UA_FILTEROPERATOR_LIKE;}
                        | ( "CAST" | '->')                                                                                               {$$.element.filter = UA_FILTEROPERATOR_CAST;}
                        | ( "BITAND" | '&' )                                                                                             {$$.element.filter = UA_FILTEROPERATOR_BITWISEAND;}
                        | ( "BITOR" | 'v')                                                                                               {$$.element.filter = UA_FILTEROPERATOR_BITWISEOR;}
Operand = _  ( (LiteralOperand | '('_   LiteralOperand _ ')')
             | (ElementOperand | '(' _  ElementOperand _  ')')                                                          {handle_elementoperand(&$$.operand, yytext);}
             | ('(' _ SimpleAttributeOperand _ ')'| SimpleAttributeOperand)
             ) _
ElementOperand = (_  '$'  (<[0-9]+>| ParsedString) _ )
SimpleAttributeOperand =
        (   _  (_ 'TYPEID' _  NodeId)?                                                                                  {set_up_typeid(&operand);}
               (_  'PATH' _  '"' <(QualifiedName+)> '"')                                                                {yy->parsedFilter.status = set_up_browsepath(&operand.sao.browsePath, &operand.sao.browsePathSize, yytext, yy->parsedFilter.status);}
               (_  'ATTRIBUTE' _  <[0-9]+>)?                                                                            {operand.sao.attributeId = (UA_UInt32) atoi(yytext);}
               (_  'INDEX' _   NumericRange                                                                             {operand.sao.indexRange = UA_String_fromChars(yytext);}
        )?) _                                                                                                           {handle_sao(&operand.sao, &$$.operand);}
NodeId = (
               (<('ns=' [0-9]+ ";")? 'i=' [0-9]+>)                                                                      {append_string(&operand.str, yytext);}
            |  (<('ns=' [0-9]+ ";")?'s='>                                                                               {append_string(&operand.str, yytext);}
                    ParsedString)                                                                                       {append_string(&operand.str, yytext);}
            |  <('ns=' [0-9]+ ";")?'g=' ([a-zA-Z_] | [0-9] | "-")+ >                                                    {append_string(&operand.str, yytext);}
            |  (<('ns=' [0-9]+ ";")?'b=' >                                                                              {append_string(&operand.str, yytext);}
                    ParsedString)                                                                                       {append_string(&operand.str, yytext);}
         )                                                                                                              {yy->parsedFilter.status = create_nodeId_from_string(operand.str, &operand.id, yy->parsedFilter.status);}
LiteralOperand = ( litValue:ParsedJsonString| litValue:Literal)                                                         {handle_literal_operand(&$$.operand, &operand.literal);}
Literal =           ( 'INT32' _  <"-"? [0-9]+>                                                                          {set_up_variant_from_int32(yytext, &operand.literal.value);}
                    | 'STRING' _  ParsedString                                                                          {set_up_variant_from_string(yytext, &operand.literal.value);}
                    | 'BOOL' _  (<('true' | 'True' | 'false' | 'False')> | <[0-1]> )                                    {set_up_variant_from_bool(yytext, &operand.literal.value);}
                    | 'INT16' _  <"-"? [0-9]+>                                                                          {set_up_variant_from_int16(yytext, &operand.literal.value);}
                    | 'INT64' _  <"-"? [0-9]+>                                                                          {set_up_variant_from_int64(yytext, &operand.literal.value);}
                    | 'UINT16' _  <[0-9]+>                                                                              {set_up_variant_from_uint16(yytext, &operand.literal.value);}
                    | 'UINT32' _  <[0-9]+>                                                                              {set_up_variant_from_uint32(yytext, &operand.literal.value);}
                    | 'UINT64' _  <[0-9]+>                                                                              {set_up_variant_from_uint64(yytext, &operand.literal.value);}
                    | 'DOUBLE' _  <("-")? [0-9]+ ('.' [0-9]+)? >                                                        {set_up_variant_from_double(yytext, &operand.literal.value);}
                    | 'FLOAT' _  <("-")? [0-9]+ ('.' [0-9]+)?>                                                          {set_up_variant_from_float(yytext, &operand.literal.value);}
                    | 'NODEID' _  NodeId                                                                                {set_up_variant_from_nodeId(&operand.id, &operand.literal.value);}
                    | 'SBYTE' _  <"-"? [0-9]+>                                                                          {set_up_variant_from_sbyte(yytext, &operand.literal.value);}
                    | 'BYTE' _  <[0-9]+>                                                                                {set_up_variant_from_byte(yytext, &operand.literal.value);}
                    | 'TIME' _  ('"' <("-" | [0-9] | [a-zA-Z] | "." | ":")+> '"')                                       {set_up_variant_from_time(yytext, &operand.literal.value);}
                    | 'GUID' _  <([a-zA-Z_] | [0-9] | "-")+>                                                            {set_up_variant_from_guid(yytext, &operand.literal.value);}
                    | 'BSTRING' _  ParsedString                                                                         {set_up_variant_from_bstring(yytext, &operand.literal.value);}
                    | 'STATUSCODE' _  <([a-zA-Z_] | [0-9])+>                                                            {set_up_variant_from_statuscode(yytext, &operand.literal.value);}
                    | 'EXPNODEID' _  ParsedString                                                                       {yy->parsedFilter.status = set_up_variant_from_expnodeid(yytext, &operand.literal.value, yy->parsedFilter.status);}
                    | 'QNAME' _  '"' <(QualifiedName)> '"'                                                              {yy->parsedFilter.status = set_up_variant_from_qname(yytext, &operand.literal.value, yy->parsedFilter.status);}
                    | 'LOCALIZED' _  ParsedString                                                                       {set_up_variant_from_localized(yytext, &operand.literal.value);}
                    | ((
                                   _  NodeId                                                                            {set_up_variant_from_nodeId(&operand.id, &operand.literal.value);}
                                 | _  <"-"? [0-9]+> !'.'                                                                {set_up_variant_from_int64(yytext, &operand.literal.value);}
                                 | _  !('"'_ ReferenceType) ParsedString                                                {set_up_variant_from_string(yytext, &operand.literal.value);}
                                 | _  <('true' | 'True' | 'false' | 'False')>                                           {set_up_variant_from_bool(yytext, &operand.literal.value);}
                                 | _  <(("-")? [0-9]+ '.' [0-9]*)> _                                                    {set_up_variant_from_double(yytext, &operand.literal.value);}
                                 | _  '"' <(QualifiedName)>  '"'  !('true' | 'True' | 'false' | 'False' )               {set_up_variant_from_qname(yytext, &operand.literal.value, yy->parsedFilter.status);}
                    )))
ParsedJsonString = (JsonObject | '(' JsonObject ')')   _                                                                {yy->parsedFilter.status = create_literal_operand(yytext, &operand.literal, yy->parsedFilter.status);}
JsonObject =    <"{" _ (JsonElement _',' _ )* JsonElement _ "}">
JsonArray = '[' _  ( (JsonValue _ ',' _ )* JsonValue) _']'
JsonElement =   _ ('"'(StringElement)+'"' _ ':' _ JsonValue) _
JsonValue = ( JsonArray | '"'(StringElement)+'"' | [0-9]+ | 'true' | 'false' | 'null')
QualifiedName = ( ReferenceType ([0-9]+ _ ":")? (StringElement+)? )
ReferenceType =  References | ('<' ('!'| '#')? ([0-9]+ _ ":")? [a-zA-Z_]+ '>')
References = ('/' | '.')
ReferenceElement = ElementOperand ':='                                                                                  {save_string(yytext, &$$.str);}
ParsedString = ('"' < (StringElement)+ > '"')
StringElement =  ('\\\"' | !["] . )
NumericRange = '[' < _ [0-9]+ _ (':' _ [0-9]+)?
                (',' _ [0-9]+ _ (':' _ [0-9]+)?)* > ']'
_ = (Space | comment)*
Space =		' ' | '\t' | Enter
comment =	('#' (!Enter .)* Enter | '/*' (![*/] .)* '*/')
Enter =	( '\r\n' | '\n' | '\r' )

%%

void clear_event_filter(UA_EventFilter *filter){
    for(size_t i=0; i< filter->selectClausesSize; i++){
        for(size_t j=0; j< filter->selectClauses[i].browsePathSize; j++){
            UA_QualifiedName_clear(&filter->selectClauses[i].browsePath[j]);
        }
        UA_NodeId_clear(&filter->selectClauses[i].typeDefinitionId);
        UA_String_clear(&filter->selectClauses[i].indexRange);
        UA_SimpleAttributeOperand_clear(&filter->selectClauses[i]);
    }
    for(size_t i=0; i<filter->whereClause.elementsSize; i++){
        for(size_t j=0; j< filter->whereClause.elements[i].filterOperandsSize; j++){
            UA_ExtensionObject_clear(&filter->whereClause.elements[i].filterOperands[j]);
        }
        UA_ContentFilterElement_clear(&filter->whereClause.elements[i]);
    }
    UA_ContentFilter_clear(&filter->whereClause);
    UA_EventFilter_clear(filter);
}

UA_StatusCode UA_EventFilter_parse(UA_ByteString *content, UA_EventFilter *filter) {
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.input = *content;
    while (yyparse(&ctx));
    UA_StatusCode retval;
    if(ctx.parsedFilter.status != UA_STATUSCODE_GOOD){
        UA_StatusCode_copy(&ctx.parsedFilter.status ,&retval);
        clear_event_filter(&ctx.parsedFilter.filter);
        yyrelease(&ctx);
        return retval;
    }
    UA_EventFilter_copy(&ctx.parsedFilter.filter, filter);
    clear_event_filter(&ctx.parsedFilter.filter);
    yyrelease(&ctx);
    return UA_STATUSCODE_GOOD;
}